#!/bin/bash
# Copyright 2023      Red Hat, Inc
# Requires: curl, jq, column (from util-linux), fzf, fold
# Optional requirements: xdg-open (open on Darwin), mktemp
set -u

# We are going to be calling ourselves, so we need to know where we are.
FZF_JIRA=$(readlink -f "${BASH_SOURCE[0]}")

XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-$HOME/.config}
XDG_CACHE_HOME=${XDG_CACHE_HOME:-$HOME/.cache}
CACHEDIR=$XDG_CACHE_HOME/jira-osp
mkdir -p "$CACHEDIR"
CACHE=$CACHEDIR/fzf-jira.json

# Jira configuration
JIRAURL=https://issues.redhat.com
JIRAAPIURL=$JIRAURL/rest/api/2
JIRAOSPCONFIG=$XDG_CONFIG_HOME/jira-osp/config
if ! test -r "$JIRAOSPCONFIG"; then
    echo "A Jira token must be available in \$XDG_CONFIG_HOME/jira-osp/config:"
    echo ""
    echo -e "\t\$ cat \$XDG_CONFIG_HOME/jira-osp/config"
    echo -e "\ttoken=secret-token"
    exit 1
fi
JIRATOKEN=$(awk 'BEGIN {FS="="} /^token=/ {print $2}' "$JIRAOSPCONFIG")
if test -z "$JIRATOKEN"; then
    echo "Could not find Jiratoken in $JIRAOSPCONFIG"
    echo "$JIRAOSPCONFIG must contain the following line:"
    echo -e "token=secret-token"
    exit 1
fi

# Some common curl options we will always be passing to curl.
CURL_OPTS=(-s
       -H "Authorization: Bearer $JIRATOKEN"
       -H "Content-Type: application/json"
)

# The custom fields used by our Jira instance.
CF_PARENT=customfield_12311140
CF_PLANNING=customfield_12319440
CF_STORYPOINTS=customfield_12310243
CF_TSHIRT=customfield_12316541
CF_WHITEBOARD=customfield_12316843
CF_WORKSTREAM=customfield_12319275

# We pass these common arguments to most of our calls to jq, even when we do
# not need access to all these custom fields.
# We will not be able to write:
#   .fields.$planning
# So we will have to write:
#   .fields[$planning]
JQ_ARGS=(
    --arg parent "$CF_PARENT"
    --arg planning "$CF_PLANNING"
    --arg storypoints "$CF_STORYPOINTS"
    --arg tshirt "$CF_TSHIRT"
    --arg whiteboard "$CF_WHITEBOARD"
    --arg workstream "$CF_WORKSTREAM"
)

build_cache () {
    PROJECT=$1
    WHITEBOARD="DFG:Storage Squad:$PROJECT"
    JQL="project in (OSP, RHOSPDOC)"
    JQL="$JQL AND (Whiteboard ~ '$WHITEBOARD' OR Workstream='Storage; $PROJECT')"
    JQL="$JQL AND issuetype in ('Epic', 'Story')"
    JQL="$JQL ORDER by key DESC"
    local data='{
        "jql": "'${JQL}'",
        "fields": [
            "description",
            "fixVersions",
            "summary",
            "key",
            "labels",
            "status",
            "'$CF_PARENT'",
            "'$CF_PLANNING'",
            "'$CF_TSHIRT'",
            "'$CF_STORYPOINTS'",
            "'$CF_WHITEBOARD'",
            "'$CF_WORKSTREAM'",
            "issuetype"
        ],
        "maxResults": 1000
    }'
    curl "${CURL_OPTS[@]}" \
       -X POST \
        --data "$data" \
        "$JIRAAPIURL/search" > "$CACHE"
}

# The list_* functions all add a surprising string as the last column:
# - EPIC for list_epics;
# - STORY for list_stories;
# - the key of the parent epic for list_stories_for_epic.
#
# When we update a field (using Alt+u), we need to reload the current view so
# that the user can see the new value of the field they have just updated. This
# means we need to figure out what view we are currently displaying. If the
# highlighted entry is an epic, then it's pretty straightfoward; but if the
# highlighted entry is a story, we might be displaying *all* stories or just
# the children of a specific epic, and we cannot know which one it is.
#
# To solve this issue, we add this info in the last column. fzf will hide it
# thanks to the --with-nth option.
list_epics () {
    jq -r \
        '.issues[]
        | select(.fields.issuetype.name=="Epic")
        | [.key,
           .fields.status.name,
           .fields.fixVersions[0].name // "----------",
           .fields.summary,
           "EPIC"]
        | @tsv
    ' "$CACHE" \
    | column -s $'\t' -t
}

list_stories () {
    jq "${JQ_ARGS[@]}" -r \
        '.issues[]
        | select(.fields.issuetype.name=="Story")
        | [.key,
           .fields.status.name,
           .fields[$planning][0].value // "------",
           .fields.summary,
           "STORY"]
        | @tsv
    ' "$CACHE" \
    | column -s $'\t' -t
}

list_stories_for_epic () {
    jq "${JQ_ARGS[@]}" -r --arg epickey "$1" \
        '.issues[]
        | select(.fields.issuetype.name=="Story" and
                 .fields[$parent]==$epickey)
        | [.key,
           .fields.status.name,
           .fields[$planning][0].value // "------",
           .fields.summary,
           $epickey]
        | @tsv
    ' "$CACHE" \
    | column -s $'\t' -t
}

_preview_print_description () {
    echo "= Description =================================================================="
    jq -r --arg issuekey "$1" \
        '.issues[]
        | select(.key == $issuekey)
        | .fields.description // "No description provided"
        ' "$CACHE" \
    | fold -s
    echo "= End of description ==========================================================="
}

preview_epic () {
    jq "${JQ_ARGS[@]}" -r --arg epickey "$1" \
        '.issues[]
        | select(.key == $epickey)
        | .summary=.fields.summary
        | .status=.fields.status.name
        | .version=(.fields.fixVersions[0].name // "Not set")
        | .whiteboard=(.fields[$whiteboard] // "---")
        | ."tshirt size"=(.fields[$tshirt] // {value: "---"}).value
        | .labels=((if .fields.labels | length > 0 then .fields.labels
                    else ["---"]
                    end) | join (", "))
        | del(.self, .expand, .fields, .id)
        | to_entries
        | map("\(.key)|\(.value|tostring)")
        | .[]' "$CACHE" \
    | column -s '|' -t
    echo ""
    _preview_print_description "$1"
}

preview_story () {
    jq "${JQ_ARGS[@]}" --arg storykey "$1" -r '.issues[]
        | select(.key==$storykey)
        | .summary=.fields.summary
        | .labels=((if .fields.labels | length > 0 then .fields.labels
                    else ["---"]
                    end) | join (", "))
        | .planning=(.fields[$planning][0].value // "---")
        | .whiteboard=(.fields[$whiteboard] // "---")
        | .workstream=((.fields[$workstream] // [{value: "---"}])
                        | map(.value)
                        | join(", "))
        | ."story points"=(.fields[$storypoints] // "---")
        | del(.self, .expand, .fields, .id)
        | to_entries
        | map("\(.key)\t\(.value|tostring)")
        | .[]' "$CACHE" \
    | column -s $'\t' -t
    echo ""
    _preview_print_description "$1"
}

# Regarding the update_<FIELD> functions:
# - they all start by making a call to the API to update the value of the field
#   we are interested in;
# - they then update the cache directly by editing it rather than rebuilding it
#   through another call to the API, so that this operation is quicker. The
#   written cache may not be exactly the same as it would have been had a call
#   to the API been made, but as long as all the fields we're accessing are
#   available, it's good enough for us.
update_tshirt_size () {
    local data
    data=$(jq --null-input \
        --arg cftshirt "$CF_TSHIRT" \
        --arg tshirtsize "$2" \
        '{"fields":{($cftshirt):{"value":$tshirtsize}}}')
    curl "${CURL_OPTS[@]}" \
        -X PUT \
        --data "$data" \
        "$JIRAAPIURL/issue/$1" && \
    tmpfile=$(mktemp) && \
    jq "${JQ_ARGS[@]}" --compact-output \
        --arg epickey "$1" --arg tshirtsize "$2" \
        '(.issues[] | select(.key==$epickey))
         .fields[$tshirt].value |= $tshirtsize' \
        "$CACHE" > "$tmpfile" && \
    mv "$tmpfile" "$CACHE"
}

update_fixversions () {
    local data
    data=$(jq --null-input \
        --arg version "$2" \
        '{"fields":{"fixVersions":[{"name":$version}]}}')
    curl "${CURL_OPTS[@]}" \
        -X PUT \
        --data "$data" \
        "$JIRAAPIURL/issue/$1" && \
    tmpfile=$(mktemp) && \
    jq "${JQ_ARGS[@]}" --compact-output \
        --arg epickey "$1" --arg version "$2" \
        '(.issues[] | select(.key==$epickey))
         .fields.fixVersions[0].name |= $version' \
        "$CACHE" > "$tmpfile" && \
    mv "$tmpfile" "$CACHE"
}

update_planning () {
    local data
    data=$(jq --null-input \
        --arg cfplanning "$CF_PLANNING" \
        --arg value "$2" \
        '{"fields":{($cfplanning):[{"value":$value}]}}')
    curl "${CURL_OPTS[@]}" \
        -X PUT \
        --data "$data" \
        "$JIRAAPIURL/issue/$1" && \
    tmpfile=$(mktemp) && \
    jq "${JQ_ARGS[@]}" --compact-output \
        --arg epickey "$1" --arg value "$2" \
        '(.issues[] | select(.key==$epickey))
         .fields[$planning] |= [{"value": $value}]' \
        "$CACHE" > "$tmpfile" && \
    mv "$tmpfile" "$CACHE"
}

update_storypoints () {
    local data
    data=$(jq --null-input \
        --arg cfstorypoints "$CF_STORYPOINTS" \
        --arg points "$2" \
        '{"fields":{($cfstorypoints):$points|tonumber}}')
    curl "${CURL_OPTS[@]}" \
        -X PUT \
        --data "$data" \
        "$JIRAAPIURL/issue/$1" && \
    tmpfile=$(mktemp) && \
    jq "${JQ_ARGS[@]}" --compact-output \
        --arg epickey "$1" --arg points "$2" \
        '(.issues[] | select(.key==$epickey))
         .fields[$storypoints] |= $points' \
        "$CACHE" > "$tmpfile" && \
    mv "$tmpfile" "$CACHE"

}

update_issue () {
    # Figure out what fields might be updated depending on the type of issue we
    # are trying to update.
    kind=$(jq -r --arg key "$1" \
            '.issues[]
            | select(.key==$key)
            |.fields.issuetype.name
            ' "$CACHE")
    case "$kind" in
    "Epic") options="T-shirt\nVersion" ;;
    "Story") options="Planning\nStoryPoints" ;;
    esac

    # Ask the user what field they would like to update
    what=$(echo -e "$options" |
        fzf-tmux -p 50%,50% \
            --prompt "[$1] What do you want to edit? > ")
    test -z "$what" && return

    # Present the user with valid values for the field they are trying to
    # update.
    case "$what" in
    "T-shirt")
        options="S\nM\nL\nXL"
        updatefn=update_tshirt_size
        ;;
    "Version")
        # TODO: We could probably generate a list of relevant versions rather
        # than making a call to the API.
        options=$(curl "${CURL_OPTS[@]}"  \
           -X GET \
            "$JIRAAPIURL/project/OSP/versions" \
            | jq -r .[].name | grep "rhos-[0-9]" | sort -rV)
        updatefn=update_fixversions
        ;;
    "Planning")
        # TODO: We could probably generate a list of relevant planning targets
        # rather than making a call to the API.
        options=$(curl "${CURL_OPTS[@]}"  \
           -X GET \
            "$JIRAAPIURL/issue/$1/editmeta" \
            |jq "${JQ_ARGS[@]}" -r '.fields[$planning].allowedValues[].value' \
            |sort -rV)
        updatefn=update_planning
        ;;
    "StoryPoints")
        options="1\n2\n3\n5\n8\n13\n21"
        updatefn=update_storypoints
        ;;
    esac
    v=$(echo -e "$options" \
        | fzf-tmux -p 50%,50% --prompt "[$1] New value for '$what' > ")

    # Finally, update the field!
    test -n "$v" && "$updatefn" "$1" "$v"
}

# We need to export this function so that it is available to fzf
reload_view () {
    # This function is meant to be called through "reload()" in an fzf binding.
    # It figures out which view is currently being displayed, and reloads it.
    # Arguments:
    # $1: Path to fzf-jira
    # $2: EPIC to reload the epics view
    #     STORY to reload the stories view
    #     XXX-123 to reload the "children of XXX-123" view
    case "$2" in
        EPIC) bash "$1" list-epics;;
        STORY) bash "$1" list-stories;;
        *) bash "$1" list-stories-for-epic "$2";;
    esac
}
export -f reload_view

fzf_epics () {
    bash "$FZF_JIRA" list-epics \
    | fzf \
        --multi \
        --header-lines 1 \
        --preview "bash $FZF_JIRA preview-epic {1}" \
        --preview-window bottom +s \
        --with-nth 1..-2 \
        --bind "ctrl-o:execute-silent(bash $FZF_JIRA open-issues {+1})" \
        --bind "alt-p:toggle-preview" \
        --bind "alt-e:reload(bash $FZF_JIRA list-epics)" \
        --bind "alt-e:+change-preview(bash $FZF_JIRA preview-epic {1})" \
        --bind "alt-e:+rebind(alt-c)+rebind(alt-s)" \
        --bind "alt-e:+clear-query" \
        --bind "alt-e:+first" \
        --bind "alt-c:reload(bash $FZF_JIRA list-stories-for-epic {1})" \
        --bind "alt-c:+change-preview(bash $FZF_JIRA preview-story {1})" \
        --bind "alt-c:+unbind(alt-c)" \
        --bind "alt-c:+clear-query" \
        --bind "alt-c:+first" \
        --bind "alt-s:reload(bash $FZF_JIRA list-stories)" \
        --bind "alt-s:+change-preview(bash $FZF_JIRA preview-story {1})" \
        --bind "alt-s:+unbind(alt-s)+unbind(alt-c)" \
        --bind "alt-s:+clear-query" \
        --bind "alt-s:+first" \
        --bind "alt-u:execute(bash $FZF_JIRA update-issue {1})" \
        --bind "alt-u:+reload(reload_view $FZF_JIRA {-1})"
}

usage () {
    script=$(basename "$0")
    echo "Usage:"
    echo -e "\t$script PROJECT"
    echo ""
    echo "where PROJECT can be Ceph, Cinder, Glance, Manila, Swift"
}

if [[ "$#" -gt "0" ]]; then
    # Add "XXX" at the end since "--with-nth" affects headers passed using
    # --header-lines.
    COMMONBINDINGS='ALT + toggle (p)review | ALT + (u)pdate XXX'
    case "$1" in
        -h|--help)
            usage
            exit 0
            ;;
        list-epics)
            echo "ALT + (s)tories | ALT + (c)hildren | $COMMONBINDINGS"
            list_epics
            ;;
        list-stories)
            echo "ALT + (e)pics | $COMMONBINDINGS"
            list_stories
            ;;
        list-stories-for-epic)
            echo "ALT + (e)pics | ALT + (s)tories | $COMMONBINDINGS"
            list_stories_for_epic "$2"
            ;;
        open-issues)
            shift
            case "$(uname -s)" in
                Darwin) openfn=open;;
                *)      openfn=xdg-open;;
            esac
            while [[ "$#" -gt 0 ]]; do
                "$openfn" "$JIRAURL/browse/$1" >/dev/null 2>&1
                shift
            done
            ;;
        preview-epic)
            preview_epic "$2"
            ;;
        preview-story)
            preview_story "$2"
            ;;
        update-issue)
            update_issue "$2"
            ;;
        [Cc]eph|[Cc]inder|[Gg]lance|[Mm]anila|[Ss]wift)
            build_cache "$1"
            fzf_epics
            ;;
        *)
            echo "Wrong subcommand $1"
            ;;
    esac
else
    usage
fi
